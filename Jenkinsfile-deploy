properties([
    parameters([
        booleanParam(name: 'uploadDeploy', defaultValue: false, description: 'fail the build for testing'),
        booleanParam(name: 'failBuild', defaultValue: false, description: 'fail the build for testing'),
        booleanParam(name: 'unstableBuild', defaultValue: false, description: 'mark the build as unstable'),
        booleanParam(name: 'longWait', defaultValue: false, description: 'have the deploy wait a long time'),
        stringParam(name: 'commitId', defaultValue: '', description: 'the commit that was built.')
    ])
])

node('master') {
    stage ('Pull artifacts') {
        checkout scm
        println('Pulling files')
        if (params.longWait) {
            //sleep(5000)
            sleep(5)
        } else {
            sleep(5)
        }
        if (params.failBuild) {
            error('Got an error building.')
        }
        if (params.unstableBuild) {
            currentBuild.result = hudson.model.Result.UNSTABLE.toString()
        }
    }
    stage ('Uncompress') {
        println('Uncompressing files')
        sleep(5)
    }
    stage ('Publish Success') {
        println('Publishing it!!!')
        def causes = currentBuild.rawBuild.getCauses()
        def cause = causes.get(0)
        def returnProps = cause.getReturnProps()
        def versionName = returnProps.get('versionName')
        def envId = returnProps.get('envId')
        def envName = returnProps.get('envName')
        println('versionName: ' + versionName)
        println('envName: ' + envName)
        println('envId: ' + envId)
        sleep(5)
        //if (uploadDeploy) {
                step([
                    $class: 'UploadDeployment',
                    debug: true,
                    fatal: false,
                    name: 'Deploy It',
                    appId: 'f7d227e6-5b30-4dd2-9c48-3cd54192fba1',
                    description: "${versionName}-${env.BUILD_ID} to ${envName}",
                    startTime: "${currentBuild.startTimeInMillis}",
                    endTime: "${System.currentTimeMillis()}",
                    environmentId: "${envId}",
                    environmentName: "${envName}",
                    initiator: "Jenkins",
                    result: "success",
                    tenantId: "5ade13625558f2c6688d15ce",
                    type: 'Jenkins',
                    versionExtId: "${versionName}",
                    versionName: "${versionName}"
                ]) 
        //}
    }
}
